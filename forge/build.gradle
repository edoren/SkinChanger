plugins {
    id "com.github.johnrengelman.shadow"
}

loom {
    forge {
        mixinConfig "skin_changer.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ":common", configuration: "transformProductionForge")
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def replaceProperties = [
        java_version              : java_version,
        minecraft_version         : minecraft_version,
        minecraft_version_range   : minecraft_version_range,
        forge_version_range       : forge_version_range,
        forge_loader_version_range: forge_loader_version_range,
        mod_id                    : mod_id,
        mod_name                  : mod_name,
        mod_license               : mod_license,
        mod_version               : mod_version,
        mod_authors               : mod_authors,
        mod_description           : mod_description,
        mod_display_url           : mod_display_url,
        mod_issue_tracker_url     : mod_issue_tracker_url,
        architectury_api_version  : architectury_api_version,
        architectury_version_range: architectury_version_range
]
processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
}
